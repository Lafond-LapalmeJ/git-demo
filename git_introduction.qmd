---
title: "Git: A key tool for reproducibility in Science"
author: "Joel Lafond-Lapalme"
format: 
  revealjs:
    logo: images/AAFC_logo.png
    slide-number: true
    theme: serif
    mermaid-format: png
---

## Reproducibility in Science

> The thing that separates what we do in science versus magic is **reproducibility**

\- *Martin J. Elliott*

## Code reproducibility in Science

<br>

### Project timeline

```{mermaid}
  %%{init: {'theme': 'base',
    "themeVariables": {"tagLabelFontSize": "20px"},
    "gitGraph": {"showBranches": false, "showCommitLabel": false}
  }}%%
  
      gitGraph:
        commit type: HIGHLIGHT tag: "Project start"
        commit
        commit type: HIGHLIGHT
        commit tag: "Presentation lab meeting"
        commit
        commit
        commit
        commit type: HIGHLIGHT
        commit tag: "Draft paper X"
        commit
        commit type: HIGHLIGHT
        commit tag: "Correction paper X"
        commit
        commit
        commit type: HIGHLIGHT
        commit tag: "Poster conference Y"
        
  
```

-   Your code evolves with your project
-   You should be able to retrieve the code at any key points of your project.
-   You will have to share your code with others or with your future self


## Key elements for code reproducibility

<br>

-   Clear and Organized project
-   Documentation

## Clear and Organized project {.smaller}

<br>

::: columns
::: column
![](images/messy_workflow.JPG)
:::

::: column
::: fragment
### Code organization

-   Within your files
-   Between your files
-   Understandable by others
-   Across time
:::
:::
:::

::: fragment
```{mermaid}
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showBranches': true, 'showCommitLabel':false}} }%%
      gitGraph:
        commit
        branch hotfix
        checkout hotfix
        commit
        branch develop
        checkout develop
        branch featureB
        checkout featureB
        commit type:HIGHLIGHT
        checkout main
        checkout hotfix
        commit type:NORMAL
        checkout develop
        commit type:REVERSE
        checkout featureB
        commit
        checkout main
        merge hotfix
        checkout featureB
        commit
        checkout develop
        branch featureA
        commit
        checkout develop
        merge hotfix
        checkout featureA
        commit
        checkout featureB
        commit
        checkout develop
        merge featureA
        commit
        commit
        checkout main
        merge develop
  
```
:::
## Documentation {.smaller}

> Documentation is a love letter to your future self.

\- *Damien Conway*

<br/>

. . .

::: columns
::: {.column width="70%"}
#### Within code

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "|1,5,8|10,12|"

# Load required libraries
library(tidyverse)
library(vegan)

# import data
data(iris)

# Boxplot sepal length by species
iris %>%
  as_tibble() %>% # Convert to tibble format
  ggplot(aes(x = Species, y = Sepal.Length))+
  geom_boxplot(outlier.shape = NA)+ # Remove the outliers point
  geom_jitter(width = 0.2, size = 1)+
  labs(x = "Iris species", y = "Sepal Length")

```
:::

::: {.column width="30%"}
::: fragment
#### README file

Use the README to guide others in your project:

-   **What?** Goals, History, Contributors
-   **Where?** Data, File Structure
-   **How?** Usage, Setup
:::
:::
:::

## What is git? {.smaller}

Git is a version control software used for code management.

. . .

<br>

### Why should I use Git?

-   Track changes
    -   Over time
    -   Between colleagues and collaborators
-   Document changes
-   Have the option to go back in time

::: fragment
### â†’ Enhance reproducibility of your code!
:::

::: footer
Learn more about [Git](https://git-scm.com/book/en/v2/Getting-Started-What-is-Git%3F)
:::

## Examples

<br>

### List of examples where Git can help you.

- Retrieve old codes, figures or analysis
- Collaborate, share and contribute
- Continuous development without disturbing the usage of a tool  
- Sync documentation and code

## Gitlab and Github {.smaller}

Gitlab and Github are web-based Git repository hosting platforms used to:

- Store git repositories
- Backup your codes and documentation files
- Collaborate and share with others
- And more...

You can customize visibility and permissions on your project:

- Private or public
- Who can see?
- Who can edit?

Example of a github: [NCBI account](https://github.com/ncbi/)

AAFC has an internal Gitlab instance: [GCcode](https://gccode.ssc-spc.gc.ca/)



## Basics of git {.smaller}

<br>

### Terms, Commands and Definition


-   **Git repository**
-   **Git commit**
-   **Git branch**
-   **Git merge**
-   **Git tag**
-   **Remote/Local Repository**
-   **Git push**
-   **Git pull**
-   **Git conflict**
-   **.gitignore file**


------

### Git repository


The repository is everything in your project folder that is tracked by Git. It includes all files, folders, history and commits. 

<br>


![](images/git_repo.jpg)

------

### Git commit

The commit is the action of saving the current state of your repository. Commits always include a message or comment to help track the history of your project. 


```{mermaid}
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showBranches': false, 'rotateCommitLabel':true}} }%%
      gitGraph
        commit id: "First commit"

```

```{bash}
#| eval: false
#| echo: true
git commit -m "C2"
```

::: fragment
```{mermaid}
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showBranches': false, 'rotateCommitLabel':true}} }%%
      gitGraph
        commit id: "First commit"
        commit id: "C2"

```
:::


::: fragment
```{bash}
#| eval: false
#| echo: true
git commit -m "C3"
git commit -m "C4"
```

```{mermaid}
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showBranches': false, 'rotateCommitLabel':true}} }%%
      gitGraph
        commit id: "First commit"
        commit id: "C2"
        commit id: "C3"
        commit id: "C4"

```
:::

------- 

### Git branch

Use branches to organize your commits. You can work on a
specific branch without changing or breaking other branches.

```{mermaid}
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showBranches': true, 'rotateCommitLabel':true}} }%%
      gitGraph
        commit id: "First commit"
        commit id: "C2"
        commit id: "C3"
        commit id: "C4"

```

```{bash}
#| eval: false
#| echo: true
#| code-line-numbers: "1|2-4|5-6|7-8|"
git branch develop
git checkout develop
git commit -m "C5"
git commit -m "C6"
git checkout main
git commit -m "C7"
git checkout develop
git commit -m "C8"
```

```{mermaid}
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showBranches': true, 'rotateCommitLabel': true}} }%%
      gitGraph
        commit id: "First commit"
        commit id: "C2"
        commit id: "C3"
        commit id: "C4"
        branch develop
        checkout develop
        commit id: "C5"
        commit id: "C6"
        checkout main
        commit id: "C7"
        checkout develop
        commit id: "C8"

```


------

### Git merge 

A merge is the action of merging the commits of a branch to another branch


```{mermaid}
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showBranches': true, 'rotateCommitLabel': true}} }%%
      gitGraph
        commit id: "First commit"
        commit id: "C2"
        commit id: "C3"
        commit id: "C4"
        branch develop
        checkout develop
        commit id: "C5"
        commit id: "C6"
        checkout main
        commit id: "C7"
        checkout develop
        commit id: "C8"

```

```{bash}
#| eval: false
#| echo: true
git checkout main
git merge develop
```

```{mermaid}
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showBranches': true, 'rotateCommitLabel':true}} }%%
      gitGraph
        commit id: "First commit"
        commit id: "C2"
        commit id: "C3"
        commit id: "C4"
        branch develop
        checkout develop
        commit id: "C5"
        commit id: "C6"
        checkout main
        commit id: "C7"
        checkout develop
        commit id: "C8"
        checkout main
        merge develop

```

------

## Remote and Local repository

::: columns

::: column
**Local repository** is your git repository on your local computer or HPC. Usually the repository you are working on. 

![](images/laptop.png){width=50%}
:::

::: column
**Remote repository** is a version of your project hosted on a server (usually Github or Gitlab)

![](images/Github.png){width=50%}
:::
:::

------

### Git Push

Push changes (commits) from the local repository to the remote repository

::: columns

::: {.column width="45%"}
![](images/laptop.png){width=50%}

```{mermaid}
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showBranches': true, 'rotateCommitLabel':true}} }%%
      gitGraph
        commit id: "First commit"
        commit id: "C2"
        commit id: "C3"
        commit id: "C4"
        branch develop
        checkout develop
        commit id: "C5"
        commit id: "C6"
        checkout main
        commit id: "C7"
        checkout develop
        commit id: "C8"
        checkout main
        merge develop

```
:::

::: {.column width="10%"}
<br>
<br>
<br>
<br>
<br>
<br>
&rarr;
:::

::: {.column width="45%"}
![](images/Github.png){width=50%}

::: {.r-stack}

```{mermaid}
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showBranches': true, 'rotateCommitLabel':true}} }%%
      gitGraph
        commit id: "First commit"
        commit id: "C2"
        commit id: "C3"
        commit id: "C4"
        branch develop
        checkout develop
        commit id: "C5"
        commit id: "C6"
        checkout main
        commit id: "C7"

```

::: {.fragment}
```{mermaid}
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showBranches': true, 'rotateCommitLabel':true}} }%%
      gitGraph
        commit id: "First commit"
        commit id: "C2"
        commit id: "C3"
        commit id: "C4"
        branch develop
        checkout develop
        commit id: "C5"
        commit id: "C6"
        checkout main
        commit id: "C7"
        checkout develop
        commit id: "C8"
        checkout main
        merge develop

```
:::
:::
:::
:::


------

### Git Pull

Pull changes (commits) from the remote repository to the local repository


::: columns

::: {.column width="45%"}
![](images/laptop.png){width=50%}

::: {.r-stack}

```{mermaid}
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showBranches': true, 'rotateCommitLabel':true}} }%%
      gitGraph
        commit id: "First commit"
        commit id: "C2"
        commit id: "C3"
        commit id: "C4"
        branch develop
        checkout develop
        commit id: "C5"
        commit id: "C6"
        checkout main
        commit id: "C7"

```

::: {.fragment}
```{mermaid}
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showBranches': true, 'rotateCommitLabel':true}} }%%
      gitGraph
        commit id: "First commit"
        commit id: "C2"
        commit id: "C3"
        commit id: "C4"
        branch develop
        checkout develop
        commit id: "C5"
        commit id: "C6"
        checkout main
        commit id: "C7"
        checkout develop
        commit id: "C8"
        checkout main
        merge develop

```
:::
:::
:::

::: {.column width="10%"}
<br>
<br>
<br>
<br>
<br>
<br>
&larr;
:::

::: {.column width="45%"}
![](images/Github.png){width=50%}

```{mermaid}
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showBranches': true, 'rotateCommitLabel':true}} }%%
      gitGraph
        commit id: "First commit"
        commit id: "C2"
        commit id: "C3"
        commit id: "C4"
        branch develop
        checkout develop
        commit id: "C5"
        commit id: "C6"
        checkout main
        commit id: "C7"
        checkout develop
        commit id: "C8"
        checkout main
        merge develop

```
:::
:::


## Git conflict {.smaller}

Conflicts occur when competing changes are made to the same line of a file

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "|5,7,9|5-7|7-9|"

# Table: mean sepal length by species
iris %>%
  as_tibble() %>%
  group_by(Species)%>%
<<<<<<< HEAD
summarize(mean_sepeal_length = mean(Sepal.Length))
=======
summarize(mean_sepal_len = mean(Sepal.Length))
>>>>>>> branch-a
```

To resolve a conflict: 

- Fix the code by selecting the correct version
- Remove the conflict markers
- Save and commit the resolved conflict



## .gitignore file

<br>

Add a *.gitignore* file to your repository to specify files or folders that you don't want Git to track.

- User specific files
- Temporary files

#### .gitignore

```{bash}
#| echo: true
#| eval: false
user.config
*.tmp
my_data/*
```

::: footer
Learn more about [gitignore](https://git-scm.com/docs/gitignore)
:::

## Create a Git repository {.smaller}

<br>

- From scratch on Gitlab/Github
- From scratch on your local computer
- From codes you already have on your local computer

<br>
[**Rstudio**](https://www.rstudio.com/) and [**Visual Studio Code**](https://code.visualstudio.com/) have version control user interface for Git. An easy way to start learning Git without using the command line.

There are many useful VScode extensions for git like [GitLens](https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens)
and [Git Graph](https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph)


## Work with existing Git repository on Github/Gitlab {.smaller}

<br>

#### Copy
Copy (zip file) of all source codes of a project

<br>

#### Clone
Clone a repository to create a local repository link with the remote.

<br>

#### Fork
Fork a repository to create an independent copy of a Git repository.

## Install and configure Git

1. Go to [git-scm.com](https://git-scm.com/)
2. Download and install for your OS
3. Follow the instruction in this video to configure your Git user name and email (follow until 2:10).

{{< video https://www.youtube.com/embed/wmnSyrRBKTw width="400" height="300" start="58" end="127" >}}



## Demo - Multiple users {.smaller}

<br>

::: columns
::: column
### User1: Rstudio

<br>

#### Content: 

- Initialize
- Clone
- Commit
- Push
- Pull
- Conflict
- Revert
:::

::: column
### User2: Visual Studio Code (VScode)

<br>

#### Demo

{{< video https://www.youtube.com/embed/EcONWTmYb44 width="500" height="300" >}}

:::
:::


## Branching and team development

```{mermaid}
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'rotateCommitLabel': true}}}%%
gitGraph:
  commit id: "C1"
  commit id: "C2"
  commit id: "C3"
  commit id: "C4"
  commit id: "C5"
  commit id: "C6"
  commit id: "C7"
  commit id: "C8"
  commit id: "C9"
```

. . .

Organize your commits using branches and tags to avoid issues on your **main** branch

. . .

```{mermaid}
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'rotateCommitLabel': true }}}%%
  
gitGraph:

  commit id: "C1"
  commit id: "C2"
  branch dev
  commit id: "C3"
  branch feature-XYZ
  commit id: "C4"
  commit id: "C5"
  checkout dev
  commit id: "C6"
  merge feature-XYZ
  commit id: "fix feature-xyz"
  checkout main
  merge dev tag: "V1.0"
  checkout dev
  commit id: "fix bug A"
  commit id: "fix bug B"
  checkout main
  merge dev tag: "V1.1"
```


## Issue tracking and pull request

<br>

### Git workflow for team development

Use Github/Gitlab team development features to simplify and organize collaboration in code development

{{< video https://www.youtube.com/embed/w3jLJU7DT5E width="500" height="350" >}}


## Tips to avoid issues with Git

- Avoid large files if possible
- Avoid MS Office files. **Use txt, csv, tsv**
- Use the .gitignore to keep your repository clean
- Multiple small commits are better than one large commit


## Thank you {.smaller}

::: columns

::: column
![](images/brsn_logo.png)


**Bioinformatics Research Support Network**
:::

::: column
### Links and resources

- More material on Git
  - [Pro Git book](https://git-scm.com/book/en/v2)

- Internal links
  - [AAFC Gitlab](https://gccode.ssc-spc.gc.ca/)
  - [BRSN Gitlab](https://gccode.ssc-spc.gc.ca/bioinformatics_aafc)
  - [Git resources](https://gccode.ssc-spc.gc.ca/bioinformatics_aafc/training_documentation/git_resources)

:::
:::